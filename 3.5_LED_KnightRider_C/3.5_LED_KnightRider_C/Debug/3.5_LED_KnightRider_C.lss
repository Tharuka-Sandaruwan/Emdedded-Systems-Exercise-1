
3.5_LED_KnightRider_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081e  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000698  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000328  00000000  00000000  000010e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001410  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d5  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

int main(void)
{
   DDRD = 0b11111101;
  80:	8d ef       	ldi	r24, 0xFD	; 253
  82:	8a b9       	out	0x0a, r24	; 10
   short cDelay = 100; //change delay here
   
    while (1) 
    {
		
		for (int i = 128 ; i>=8; i/=2)
  84:	80 e8       	ldi	r24, 0x80	; 128
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	15 c0       	rjmp	.+42     	; 0xb4 <main+0x34>
		{
			PORTD = 4| i;
  8a:	28 2f       	mov	r18, r24
  8c:	24 60       	ori	r18, 0x04	; 4
  8e:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	31 ee       	ldi	r19, 0xE1	; 225
  94:	44 e0       	ldi	r20, 0x04	; 4
  96:	21 50       	subi	r18, 0x01	; 1
  98:	30 40       	sbci	r19, 0x00	; 0
  9a:	40 40       	sbci	r20, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x20>
  a0:	00 00       	nop
			_delay_ms(cDelay);
			PORTD = 0;	
  a2:	1b b8       	out	0x0b, r1	; 11
   short cDelay = 100; //change delay here
   
    while (1) 
    {
		
		for (int i = 128 ; i>=8; i/=2)
  a4:	9c 01       	movw	r18, r24
  a6:	33 23       	and	r19, r19
  a8:	14 f4       	brge	.+4      	; 0xae <main+0x2e>
  aa:	2f 5f       	subi	r18, 0xFF	; 255
  ac:	3f 4f       	sbci	r19, 0xFF	; 255
  ae:	c9 01       	movw	r24, r18
  b0:	95 95       	asr	r25
  b2:	87 95       	ror	r24
  b4:	88 30       	cpi	r24, 0x08	; 8
  b6:	91 05       	cpc	r25, r1
  b8:	44 f7       	brge	.-48     	; 0x8a <main+0xa>
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	15 c0       	rjmp	.+42     	; 0xea <main+0x6a>
			PORTD = 0;	
		}

		for (int i = 128 ; i>=8; i/=2)
		{
			PORTD = 1| i;
  c0:	28 2f       	mov	r18, r24
  c2:	21 60       	ori	r18, 0x01	; 1
  c4:	2b b9       	out	0x0b, r18	; 11
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	31 ee       	ldi	r19, 0xE1	; 225
  ca:	44 e0       	ldi	r20, 0x04	; 4
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	30 40       	sbci	r19, 0x00	; 0
  d0:	40 40       	sbci	r20, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x4c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x56>
  d6:	00 00       	nop
			_delay_ms(cDelay);
			PORTD = 0;	
  d8:	1b b8       	out	0x0b, r1	; 11
			PORTD = 4| i;
			_delay_ms(cDelay);
			PORTD = 0;	
		}

		for (int i = 128 ; i>=8; i/=2)
  da:	9c 01       	movw	r18, r24
  dc:	33 23       	and	r19, r19
  de:	14 f4       	brge	.+4      	; 0xe4 <main+0x64>
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	c9 01       	movw	r24, r18
  e6:	95 95       	asr	r25
  e8:	87 95       	ror	r24
  ea:	88 30       	cpi	r24, 0x08	; 8
  ec:	91 05       	cpc	r25, r1
  ee:	44 f7       	brge	.-48     	; 0xc0 <main+0x40>
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0f c0       	rjmp	.+30     	; 0x114 <main+0x94>
			PORTD = 0;	
		}

		for (int i = 16 ; i <= 128; i*=2)
		{
			PORTD =  1|i;
  f6:	28 2f       	mov	r18, r24
  f8:	21 60       	ori	r18, 0x01	; 1
  fa:	2b b9       	out	0x0b, r18	; 11
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	31 ee       	ldi	r19, 0xE1	; 225
 100:	44 e0       	ldi	r20, 0x04	; 4
 102:	21 50       	subi	r18, 0x01	; 1
 104:	30 40       	sbci	r19, 0x00	; 0
 106:	40 40       	sbci	r20, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x82>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x8c>
 10c:	00 00       	nop
			_delay_ms(cDelay);
			PORTD = 0;	
 10e:	1b b8       	out	0x0b, r1	; 11
			PORTD = 1| i;
			_delay_ms(cDelay);
			PORTD = 0;	
		}

		for (int i = 16 ; i <= 128; i*=2)
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	81 38       	cpi	r24, 0x81	; 129
 116:	91 05       	cpc	r25, r1
 118:	74 f3       	brlt	.-36     	; 0xf6 <main+0x76>
 11a:	80 e1       	ldi	r24, 0x10	; 16
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0f c0       	rjmp	.+30     	; 0x13e <main+0xbe>
			PORTD = 0;	
		}

		for (int i = 16 ; i <= 64; i*=2)
		{
			PORTD =  4|i;
 120:	28 2f       	mov	r18, r24
 122:	24 60       	ori	r18, 0x04	; 4
 124:	2b b9       	out	0x0b, r18	; 11
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	31 ee       	ldi	r19, 0xE1	; 225
 12a:	44 e0       	ldi	r20, 0x04	; 4
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	30 40       	sbci	r19, 0x00	; 0
 130:	40 40       	sbci	r20, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xac>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xb6>
 136:	00 00       	nop
			_delay_ms(cDelay);
			PORTD = 0;
 138:	1b b8       	out	0x0b, r1	; 11
			PORTD =  1|i;
			_delay_ms(cDelay);
			PORTD = 0;	
		}

		for (int i = 16 ; i <= 64; i*=2)
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	81 34       	cpi	r24, 0x41	; 65
 140:	91 05       	cpc	r25, r1
 142:	74 f3       	brlt	.-36     	; 0x120 <main+0xa0>
 144:	9f cf       	rjmp	.-194    	; 0x84 <main+0x4>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
